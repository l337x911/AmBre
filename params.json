{"name":"AmBre","tagline":"Amplification of breakpoints for reliable genome structural variation detection.","body":"===========\r\nAmBre: Primer designing and sequence analysis for amplifying breakpoints.\r\n===========\r\n\r\nDeveloped by Anand D. Patel in Vineet Bafna's lab at University of California, San Diego\r\npatel [dot] anandd [at] gmail [dot] com\r\n\r\nAmBre is composed of two computational parts. A) Primer Designing\r\nB) Long read sequence analysis.::\r\n\r\n    python ambre_design.py <reference.fasta> <regions.txt> [<temptag>]\r\n    python ambre_analyze.py <reference.fasta> <contig> <mapped_reads.sam> [<temptag>]\r\n\r\n\r\nInstalling\r\n=========\r\n\r\nSoftware Requirements\r\n-------------\r\n\r\nAmBre requires Python 2.7.x and numpy\r\n\r\nFor primer designing, the following software needs to be installed\r\n\r\n* Primer3 Version 2.3.0 http://sourceforge.net/projects/primer3/\r\n\r\n* Blat Version 34x12 http://hgdownload.cse.ucsc.edu/admin/exe/\r\n\r\n* Multiplx Version 1.2 http://bioinfo.ut.ee/?page_id=167\r\n\r\nSequence analysis using PacBio requires BLASR and SMRT pipe.\r\n* BLASR https://github.com/PacificBiosciences/blasr\r\n* PacBio SMRT-Analysis https://github.com/PacificBiosciences/SMRT-Analysis\r\n\r\nInstalling AmBre\r\n-------------\r\n\r\nDownload the tar or zip ball and install using the setup.py script. ::\r\n\t\r\n\tpython setup.py install\r\n\r\nTo configure the above binary dependencies, edit \"ambre.conf\" file. The config file\r\nis located with ::\r\n\r\n\tpython ambre_test.py -c\r\n\r\nEdit the file paths primer3_dir, aligner_bin, and multiplx to point to the correct\r\ndependency folder (primer3) or binary (blat and multiplx). In the config\r\nfile specify number of threads and a temp directory to store intermediate files.\r\n Note, user-specific  config files can be used by running any module with the --config argument. \r\n \r\nTo verify the installation/configuration is correct and\r\n run a small test case for AmBre-design and AmBre-analyze (takes ~5min). ::\r\n\r\n\tpython ambre_test.py\r\n\t\r\nIf all is well, continue to usage.\r\n\r\n============\r\nAmBre-design Usage\r\n============\r\n\r\nDescription\r\n========\r\n\r\nAmBre-design designs an assay to detect structural variations. Given input\r\nregions where one expects breakpoints for a particular structural variation\r\n(SV), AmBre-design finds primers uniformly tiled across the regions to reliably\r\namplify DNA harboring the structural variation with PCR.\r\n \r\nEach structural variation is a rearrangement of a reference DNA segments to\r\nproduce a novel adjacency in the donor sample. However, it is possible to know\r\nthat a SV occurs, without knowing the exact boundaries of the rearranged\r\nreference segments. In PCR, a forward primer (DNA sequence) designed to the\r\nleft and a reverse primer (reverse complement DNA sequence) designed to the\r\nright of the donor sample adjacency would reproduce DNA harboring the SV. PCR\r\nis only capable of reproducing a limited DNA length, so primers can only be\r\ndesigned a certain distance away from the donor adjacency. Using multiple\r\nforward primers and reverse primers across a breakpoint region ensures that\r\nsome forward and reverse primer appear within an amplifiable distance around\r\nthe donor sample adjacency.\r\n\r\nSee Patel et al. (submitted) for details.\r\n\r\nTo Run\r\n========\r\n\r\nDesigning requires a reference sequence (fasta format) and a set of forward and\r\nreverse intervals to select primers from. The <regions.txt> is a tab-delimited\r\nfile having intervals in rows and columns as contig name, interval start,\r\ninterval end, type (True for forward, False if reverse). See\r\n\"examples/regions.test\" for an example regions file.  If specified, resulting\r\nprimer designs are given in <temp_tag>.out. \r\n\r\n\tpython ambre_design.py <reference.fasta> <regions.txt> [<temptag>]\r\n\r\nParameters are defined in the the config file \"ambre.conf\". A user-defined\r\nconfig file can be used with the \"--config\" argument.\r\nPrimer designing involves numerous parameters to ensure primers are viable for\r\nPCR. AmBre requires primers to be compatible with one another and evenly tile\r\nsupposed regions. Specifying too large or too many regions requires more primers\r\nand leads to unreliable PCR. See below for fine-tuning parameters.\r\n\r\nTemptag is used as an identifier for intermediate files. \r\nIt is recommended to specify temptag as\r\na directory or directory along with a prefix expected for AmBre-design\r\nintermediate files.\r\n\r\nFor example, to reprint primer solutions and generate a summary figure for\r\nprimer locations on input regions using temptag.\r\n\r\n\tpython ambre_design.py -c <reference.fasta> <regions.txt> <temptag>\r\n\r\n\r\nParameters\r\n========\r\n\r\nIn the config file, modifying the following parameters\r\nchanges the primer designing task.\r\n\r\nThe approximate distance between primers.\r\n\r\n\tdesign_primer_spacing_p=6500\r\n\r\nThe density of primers in the candidate primer selection task,\r\nthat is (Nd/L-1) where **N** is the number of *desired* primers\r\n**d** is the spacing between primers and **L** is the total \r\nspacing. See Patel et al. (submitted) for details. \r\n\r\n\tdesign_primer_density_p=0.2\r\n\r\nCandidate primer generation is performed with Primer3 (Rozen et al. 2000)\r\nand the primer3 parameters file for long range PCR \r\nused in Patel et al. (submitted) is listed in the ambre/data directory.\r\nAnother primer3 parameter file can be used by adding the following\r\nline to the config file.\r\n\r\n\tprimer3_long_p=/<file>/<path>/<primer3>/<parameters.txt>\r\n\r\n\r\nFine-tune design parameters\r\n---------\r\n\r\nThe number of candidate primers to request from primer3\r\nper kilobase\r\n\r\n\tdesign_primer3_primers_per_bp_p=50\r\n\r\nFiltering for primer3 penalty criteria\r\n\r\n\tdesign_max_primer3_penalty_p=1.2\r\n\r\nFiltering primers with reference alignments within,\r\n\tdesign_max_amp_dist=20000\r\n\r\n============\r\nAmBre-analyze Usage\r\n============\r\n\r\nDescription\r\n========\r\n\r\nAnalyzes Pacifc Biosciences amplicon resequencing data where amplicons contain\r\nstructural variations (SV). AmBre-analyze clusters reads that support the same\r\nSV and then calls breakpoint and consensus amplicon sequences, despite reads\r\nhaving high insertion and deletion error rates. \r\n\r\nSequence analysis involves a) local alignment with BLASR, b) alignment segmentation,\r\n c) geometric SV clustering\r\napproach similar to Sindi et al. (2009). d) breakpoint and consensus sequence \r\nrefinement. \r\nSee Patel et al. (submitted) for details.\r\n\r\nTo Run \r\n======== \r\n\r\nAmBre-analyze requires a local alignment file (hard-clipped SAM\r\nformat) with the corresponding reference file (fasta format) and contig name.\r\nCurrent implementation only supports intra-contig SVs. Estimated breakpoints\r\nare reported in \"<temptag>.bp\" and estimated amplicon sequences are reported\r\nin \"<temptag>.fasta\".\r\n\r\nGiven a \"aligned_reads.bas.h5\" file from PacBio.\r\n\r\n\t/blasr/alignment/bin/blasr aligned_reads.bas.h5 <reference.fasta> -clipping hard -sam -out <aligned_reads_h5.sam>\r\n\r\n\tpython ambre_analyze.py <reference.fasta> <contig> <aligned_reads.sam> [<temptag>]\r\n\r\nThe output \"<temptag>.bp\" has each breakpoint as an entry with the following form ::\r\n\r\n\t#<name>\\t\\t\\t<mode left bp>\\t<mode right bp>\r\n\t<read_idx>\\t<bp on frag idx>\\t<left bp>\\t<right bp>\\t<d>\r\n\t...\r\n\t...\r\n\t=\r\n\r\nThe next step is to perform amplicon refinement using PacBio Amplicon\r\nResequencing Protocol.  Using SMRT-Analysis 4.0, call consensus sequencing\r\nusing the estimated amplicon \"<temptag>.fasta\" as the reference and the entire\r\nread set.\r\n\r\nParameters are defined in the the config file \"ambre.conf\". A user-defined\r\nconfig file can be used with the \"--config\" argument. See below for fine-tuning\r\nparameters.\r\n\r\nTemptag is used as an identifier for intermediate files.  It is recommended to\r\nspecify temptag as a directory or directory along with a prefix expected for\r\nAmBre-analyze (can be the same prefix as AmBre-design) intermediate files. \r\n\r\n\r\nDealing with amplicons with multiple breaks\r\n--------\r\n\r\nIf independent breakpoints found in the previous section in AmBre-analyze\r\nbelong to the same amplicon, then annotate the breakpoint headers in the\r\n\"<temptag>.bp\" file where instead of \"#\\t\" is \"#A549_01\\t\", \"#A549_02\", and\r\n\"...\" to represent ordering of breaks along an amplicon. \r\n\r\n\tpython ambre_analyze.py --multi-break <reference.fasta> <contig> <aligned_reads.sam> [<temptag>]\r\n\r\nThe new \"<temptag>.fasta\" file will have updated amplicon sequences containing\r\nmultiple breaks.\r\n\r\nParameters\r\n========\r\n\r\nIn the config file, modifying the following parameters\r\nchanges the sequence analysis task. See Patel et al. (submitted) for details.\r\n\r\nScoring for local alignment segmetnation\r\nand filtering. Mismatch fraction is because CIGAR format only retains aligned bases (M)\r\n not misaligned.\r\n\r\n\tanalyze_mismatch_fraction_p=0.02\r\n\tanalyze_match_score_p=1\r\n\tanalyze_mismatch_penalty_p=-3\r\n\tanalyze_gapopen_penalty_p=-1\r\n\tanalyze_gapext_penalty_p=-0.2\r\n\tanalyze_breakpoint_penalty_p=-50\r\n\r\nFiltering for minimum cluster size\r\n\r\n\tanalyze_min_cluster_size_p=25\r\n\r\nMore filtering criteria for breakpoints\r\n\r\n\tanalyze_min_sv_dist_p=10\r\n\tanalyze_max_d_p=100\r\n\tanalyze_default_segment_p=6500\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}